/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: netmessages.proto */

#ifndef PROTOBUF_C_netmessages_2eproto__INCLUDED
#define PROTOBUF_C_netmessages_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "networkbasetypes.pb-c.h"

typedef struct _CCLCMsgClientInfo CCLCMsgClientInfo;
typedef struct _CCLCMsgMove CCLCMsgMove;
typedef struct _CMsgVoiceAudio CMsgVoiceAudio;
typedef struct _CCLCMsgVoiceData CCLCMsgVoiceData;
typedef struct _CCLCMsgBaselineAck CCLCMsgBaselineAck;
typedef struct _CCLCMsgListenEvents CCLCMsgListenEvents;
typedef struct _CCLCMsgRespondCvarValue CCLCMsgRespondCvarValue;
typedef struct _CCLCMsgFileCRCCheck CCLCMsgFileCRCCheck;
typedef struct _CCLCMsgLoadingProgress CCLCMsgLoadingProgress;
typedef struct _CCLCMsgSplitPlayerConnect CCLCMsgSplitPlayerConnect;
typedef struct _CCLCMsgClientMessage CCLCMsgClientMessage;
typedef struct _CCLCMsgSplitPlayerDisconnect CCLCMsgSplitPlayerDisconnect;
typedef struct _CCLCMsgServerStatus CCLCMsgServerStatus;
typedef struct _CCLCMsgServerPing CCLCMsgServerPing;
typedef struct _CCLCMsgRequestPause CCLCMsgRequestPause;
typedef struct _CCLCMsgCmdKeyValues CCLCMsgCmdKeyValues;
typedef struct _CSVCMsgGameEventList CSVCMsgGameEventList;
typedef struct _CSVCMsgGameEventList__KeyT CSVCMsgGameEventList__KeyT;
typedef struct _CSVCMsgGameEventList__DescriptorT CSVCMsgGameEventList__DescriptorT;
typedef struct _CSVCMsgPacketEntities CSVCMsgPacketEntities;
typedef struct _CSVCMsgServerInfo CSVCMsgServerInfo;
typedef struct _CSVCMsgClassInfo CSVCMsgClassInfo;
typedef struct _CSVCMsgClassInfo__ClassT CSVCMsgClassInfo__ClassT;
typedef struct _CSVCMsgSetView CSVCMsgSetView;
typedef struct _CSVCMsgPrint CSVCMsgPrint;
typedef struct _CSVCMsgVoiceInit CSVCMsgVoiceInit;
typedef struct _CSVCMsgSounds CSVCMsgSounds;
typedef struct _CSVCMsgSounds__SounddataT CSVCMsgSounds__SounddataT;
typedef struct _CSVCMsgUpdateStringTable CSVCMsgUpdateStringTable;
typedef struct _CSVCMsgFullFrameSplit CSVCMsgFullFrameSplit;


/* --- enums --- */

typedef enum _VoiceDataFormatT {
  VOICE_DATA_FORMAT_T__VOICEDATA_FORMAT_STEAM = 0,
  VOICE_DATA_FORMAT_T__VOICEDATA_FORMAT_ENGINE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VOICE_DATA_FORMAT_T)
} VoiceDataFormatT;
typedef enum _RequestPauseT {
  REQUEST_PAUSE_T__RP_PAUSE = 0,
  REQUEST_PAUSE_T__RP_UNPAUSE = 1,
  REQUEST_PAUSE_T__RP_TOGGLEPAUSE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(REQUEST_PAUSE_T)
} RequestPauseT;

/* --- messages --- */

struct  _CCLCMsgClientInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_send_table_crc;
  uint32_t send_table_crc;
  protobuf_c_boolean has_server_count;
  uint32_t server_count;
  protobuf_c_boolean has_is_hltv;
  protobuf_c_boolean is_hltv;
  protobuf_c_boolean has_is_replay;
  protobuf_c_boolean is_replay;
  protobuf_c_boolean has_friends_id;
  uint32_t friends_id;
  char *friends_name;
};
#define CCLCMSG__CLIENT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__client_info__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, NULL }


struct  _CCLCMsgMove
{
  ProtobufCMessage base;
  protobuf_c_boolean has_num_backup_commands;
  uint32_t num_backup_commands;
  protobuf_c_boolean has_num_new_commands;
  uint32_t num_new_commands;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define CCLCMSG__MOVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__move__descriptor) \
    , 0,0, 0,0, 0,{0,NULL} }


struct  _CMsgVoiceAudio
{
  ProtobufCMessage base;
  protobuf_c_boolean has_format;
  VoiceDataFormatT format;
  protobuf_c_boolean has_voice_data;
  ProtobufCBinaryData voice_data;
  protobuf_c_boolean has_sequence_bytes;
  int32_t sequence_bytes;
  protobuf_c_boolean has_section_number;
  uint32_t section_number;
  protobuf_c_boolean has_sample_rate;
  uint32_t sample_rate;
  protobuf_c_boolean has_uncompressed_sample_offset;
  uint32_t uncompressed_sample_offset;
};
#define CMSG_VOICE_AUDIO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_voice_audio__descriptor) \
    , 0,VOICE_DATA_FORMAT_T__VOICEDATA_FORMAT_STEAM, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0 }


struct  _CCLCMsgVoiceData
{
  ProtobufCMessage base;
  CMsgVoiceAudio *audio;
  protobuf_c_boolean has_xuid;
  uint64_t xuid;
  protobuf_c_boolean has_tick;
  uint32_t tick;
};
#define CCLCMSG__VOICE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__voice_data__descriptor) \
    , NULL, 0,0, 0,0 }


struct  _CCLCMsgBaselineAck
{
  ProtobufCMessage base;
  protobuf_c_boolean has_baseline_tick;
  int32_t baseline_tick;
  protobuf_c_boolean has_baseline_nr;
  int32_t baseline_nr;
};
#define CCLCMSG__BASELINE_ACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__baseline_ack__descriptor) \
    , 0,0, 0,0 }


struct  _CCLCMsgListenEvents
{
  ProtobufCMessage base;
  size_t n_event_mask;
  uint32_t *event_mask;
};
#define CCLCMSG__LISTEN_EVENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__listen_events__descriptor) \
    , 0,NULL }


struct  _CCLCMsgRespondCvarValue
{
  ProtobufCMessage base;
  protobuf_c_boolean has_cookie;
  int32_t cookie;
  protobuf_c_boolean has_status_code;
  int32_t status_code;
  char *name;
  char *value;
};
#define CCLCMSG__RESPOND_CVAR_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__respond_cvar_value__descriptor) \
    , 0,0, 0,0, NULL, NULL }


struct  _CCLCMsgFileCRCCheck
{
  ProtobufCMessage base;
  protobuf_c_boolean has_code_path;
  int32_t code_path;
  char *path;
  protobuf_c_boolean has_code_filename;
  int32_t code_filename;
  char *filename;
  protobuf_c_boolean has_crc;
  uint32_t crc;
};
#define CCLCMSG__FILE_CRCCHECK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__file_crccheck__descriptor) \
    , 0,0, NULL, 0,0, NULL, 0,0 }


struct  _CCLCMsgLoadingProgress
{
  ProtobufCMessage base;
  protobuf_c_boolean has_progress;
  int32_t progress;
};
#define CCLCMSG__LOADING_PROGRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__loading_progress__descriptor) \
    , 0,0 }


struct  _CCLCMsgSplitPlayerConnect
{
  ProtobufCMessage base;
  char *playername;
};
#define CCLCMSG__SPLIT_PLAYER_CONNECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__split_player_connect__descriptor) \
    , NULL }


struct  _CCLCMsgClientMessage
{
  ProtobufCMessage base;
  protobuf_c_boolean has_msg_type;
  int32_t msg_type;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define CCLCMSG__CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__client_message__descriptor) \
    , 0,0, 0,{0,NULL} }


struct  _CCLCMsgSplitPlayerDisconnect
{
  ProtobufCMessage base;
  protobuf_c_boolean has_slot;
  int32_t slot;
};
#define CCLCMSG__SPLIT_PLAYER_DISCONNECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__split_player_disconnect__descriptor) \
    , 0,0 }


struct  _CCLCMsgServerStatus
{
  ProtobufCMessage base;
  protobuf_c_boolean has_simplified;
  protobuf_c_boolean simplified;
};
#define CCLCMSG__SERVER_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__server_status__descriptor) \
    , 0,0 }


struct  _CCLCMsgServerPing
{
  ProtobufCMessage base;
};
#define CCLCMSG__SERVER_PING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__server_ping__descriptor) \
     }


struct  _CCLCMsgRequestPause
{
  ProtobufCMessage base;
  protobuf_c_boolean has_pause_type;
  RequestPauseT pause_type;
  protobuf_c_boolean has_pause_group;
  int32_t pause_group;
};
#define CCLCMSG__REQUEST_PAUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__request_pause__descriptor) \
    , 0,REQUEST_PAUSE_T__RP_PAUSE, 0,0 }


struct  _CCLCMsgCmdKeyValues
{
  ProtobufCMessage base;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define CCLCMSG__CMD_KEY_VALUES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclcmsg__cmd_key_values__descriptor) \
    , 0,{0,NULL} }


struct  _CSVCMsgGameEventList__KeyT
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  int32_t type;
  char *name;
};
#define CSVCMSG__GAME_EVENT_LIST__KEY_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__game_event_list__key_t__descriptor) \
    , 0,0, NULL }


struct  _CSVCMsgGameEventList__DescriptorT
{
  ProtobufCMessage base;
  protobuf_c_boolean has_eventid;
  int32_t eventid;
  char *name;
  size_t n_keys;
  CSVCMsgGameEventList__KeyT **keys;
};
#define CSVCMSG__GAME_EVENT_LIST__DESCRIPTOR_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__game_event_list__descriptor_t__descriptor) \
    , 0,0, NULL, 0,NULL }


struct  _CSVCMsgGameEventList
{
  ProtobufCMessage base;
  size_t n_descriptors;
  CSVCMsgGameEventList__DescriptorT **descriptors;
};
#define CSVCMSG__GAME_EVENT_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__game_event_list__descriptor) \
    , 0,NULL }


struct  _CSVCMsgPacketEntities
{
  ProtobufCMessage base;
  protobuf_c_boolean has_max_entries;
  int32_t max_entries;
  protobuf_c_boolean has_updated_entries;
  int32_t updated_entries;
  protobuf_c_boolean has_is_delta;
  protobuf_c_boolean is_delta;
  protobuf_c_boolean has_update_baseline;
  protobuf_c_boolean update_baseline;
  protobuf_c_boolean has_baseline;
  int32_t baseline;
  protobuf_c_boolean has_delta_from;
  int32_t delta_from;
  protobuf_c_boolean has_entity_data;
  ProtobufCBinaryData entity_data;
  protobuf_c_boolean has_pending_full_frame;
  protobuf_c_boolean pending_full_frame;
  protobuf_c_boolean has_active_spawngroup_handle;
  uint32_t active_spawngroup_handle;
  protobuf_c_boolean has_max_spawngroup_creationsequence;
  uint32_t max_spawngroup_creationsequence;
};
#define CSVCMSG__PACKET_ENTITIES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__packet_entities__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,0 }


struct  _CSVCMsgServerInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_protocol;
  int32_t protocol;
  protobuf_c_boolean has_server_count;
  int32_t server_count;
  protobuf_c_boolean has_is_dedicated;
  protobuf_c_boolean is_dedicated;
  protobuf_c_boolean has_is_hltv;
  protobuf_c_boolean is_hltv;
  protobuf_c_boolean has_is_replay;
  protobuf_c_boolean is_replay;
  protobuf_c_boolean has_c_os;
  int32_t c_os;
  protobuf_c_boolean has_map_crc;
  uint32_t map_crc;
  protobuf_c_boolean has_client_crc;
  uint32_t client_crc;
  protobuf_c_boolean has_string_table_crc;
  uint32_t string_table_crc;
  protobuf_c_boolean has_max_clients;
  int32_t max_clients;
  protobuf_c_boolean has_max_classes;
  int32_t max_classes;
  protobuf_c_boolean has_player_slot;
  int32_t player_slot;
  protobuf_c_boolean has_tick_interval;
  float tick_interval;
  char *game_dir;
  char *map_name;
  char *sky_name;
  char *host_name;
  char *addon_name;
  CSVCMsgGameSessionConfiguration *game_session_config;
  protobuf_c_boolean has_game_session_manifest;
  ProtobufCBinaryData game_session_manifest;
};
#define CSVCMSG__SERVER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__server_info__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, NULL, NULL, 0,{0,NULL} }


struct  _CSVCMsgClassInfo__ClassT
{
  ProtobufCMessage base;
  protobuf_c_boolean has_class_id;
  int32_t class_id;
  char *data_table_name;
  char *class_name;
};
#define CSVCMSG__CLASS_INFO__CLASS_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__class_info__class_t__descriptor) \
    , 0,0, NULL, NULL }


struct  _CSVCMsgClassInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_create_on_client;
  protobuf_c_boolean create_on_client;
  size_t n_classes;
  CSVCMsgClassInfo__ClassT **classes;
};
#define CSVCMSG__CLASS_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__class_info__descriptor) \
    , 0,0, 0,NULL }


struct  _CSVCMsgSetView
{
  ProtobufCMessage base;
  protobuf_c_boolean has_entity_index;
  int32_t entity_index;
  protobuf_c_boolean has_slot;
  int32_t slot;
};
#define CSVCMSG__SET_VIEW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__set_view__descriptor) \
    , 0,0, 0,0 }


struct  _CSVCMsgPrint
{
  ProtobufCMessage base;
  char *text;
};
#define CSVCMSG__PRINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__print__descriptor) \
    , NULL }


struct  _CSVCMsgVoiceInit
{
  ProtobufCMessage base;
  protobuf_c_boolean has_quality;
  int32_t quality;
  char *codec;
  protobuf_c_boolean has_version;
  int32_t version;
};
#define CSVCMSG__VOICE_INIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__voice_init__descriptor) \
    , 0,0, NULL, 0,0 }


struct  _CSVCMsgSounds__SounddataT
{
  ProtobufCMessage base;
  protobuf_c_boolean has_origin_x;
  int32_t origin_x;
  protobuf_c_boolean has_origin_y;
  int32_t origin_y;
  protobuf_c_boolean has_origin_z;
  int32_t origin_z;
  protobuf_c_boolean has_volume;
  uint32_t volume;
  protobuf_c_boolean has_delay_value;
  float delay_value;
  protobuf_c_boolean has_sequence_number;
  int32_t sequence_number;
  protobuf_c_boolean has_entity_index;
  int32_t entity_index;
  protobuf_c_boolean has_channel;
  int32_t channel;
  protobuf_c_boolean has_pitch;
  int32_t pitch;
  protobuf_c_boolean has_flags;
  int32_t flags;
  protobuf_c_boolean has_sound_num;
  uint32_t sound_num;
  protobuf_c_boolean has_sound_num_handle;
  uint32_t sound_num_handle;
  protobuf_c_boolean has_speaker_entity;
  int32_t speaker_entity;
  protobuf_c_boolean has_random_seed;
  int32_t random_seed;
  protobuf_c_boolean has_sound_level;
  int32_t sound_level;
  protobuf_c_boolean has_is_sentence;
  protobuf_c_boolean is_sentence;
  protobuf_c_boolean has_is_ambient;
  protobuf_c_boolean is_ambient;
  protobuf_c_boolean has_guid;
  uint32_t guid;
  protobuf_c_boolean has_sound_resource_id;
  uint64_t sound_resource_id;
};
#define CSVCMSG__SOUNDS__SOUNDDATA_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__sounds__sounddata_t__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CSVCMsgSounds
{
  ProtobufCMessage base;
  protobuf_c_boolean has_reliable_sound;
  protobuf_c_boolean reliable_sound;
  size_t n_sounds;
  CSVCMsgSounds__SounddataT **sounds;
};
#define CSVCMSG__SOUNDS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__sounds__descriptor) \
    , 0,0, 0,NULL }


struct  _CSVCMsgUpdateStringTable
{
  ProtobufCMessage base;
  protobuf_c_boolean has_table_id;
  int32_t table_id;
  protobuf_c_boolean has_num_changed_entries;
  int32_t num_changed_entries;
  protobuf_c_boolean has_string_data;
  ProtobufCBinaryData string_data;
};
#define CSVCMSG__UPDATE_STRING_TABLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__update_string_table__descriptor) \
    , 0,0, 0,0, 0,{0,NULL} }


struct  _CSVCMsgFullFrameSplit
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tick;
  int32_t tick;
  protobuf_c_boolean has_section;
  int32_t section;
  protobuf_c_boolean has_total;
  int32_t total;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define CSVCMSG__FULL_FRAME_SPLIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csvcmsg__full_frame_split__descriptor) \
    , 0,0, 0,0, 0,0, 0,{0,NULL} }


/* CCLCMsgClientInfo methods */
void   cclcmsg__client_info__init
                     (CCLCMsgClientInfo         *message);
size_t cclcmsg__client_info__get_packed_size
                     (const CCLCMsgClientInfo   *message);
size_t cclcmsg__client_info__pack
                     (const CCLCMsgClientInfo   *message,
                      uint8_t             *out);
size_t cclcmsg__client_info__pack_to_buffer
                     (const CCLCMsgClientInfo   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgClientInfo *
       cclcmsg__client_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__client_info__free_unpacked
                     (CCLCMsgClientInfo *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgMove methods */
void   cclcmsg__move__init
                     (CCLCMsgMove         *message);
size_t cclcmsg__move__get_packed_size
                     (const CCLCMsgMove   *message);
size_t cclcmsg__move__pack
                     (const CCLCMsgMove   *message,
                      uint8_t             *out);
size_t cclcmsg__move__pack_to_buffer
                     (const CCLCMsgMove   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgMove *
       cclcmsg__move__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__move__free_unpacked
                     (CCLCMsgMove *message,
                      ProtobufCAllocator *allocator);
/* CMsgVoiceAudio methods */
void   cmsg_voice_audio__init
                     (CMsgVoiceAudio         *message);
size_t cmsg_voice_audio__get_packed_size
                     (const CMsgVoiceAudio   *message);
size_t cmsg_voice_audio__pack
                     (const CMsgVoiceAudio   *message,
                      uint8_t             *out);
size_t cmsg_voice_audio__pack_to_buffer
                     (const CMsgVoiceAudio   *message,
                      ProtobufCBuffer     *buffer);
CMsgVoiceAudio *
       cmsg_voice_audio__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_voice_audio__free_unpacked
                     (CMsgVoiceAudio *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgVoiceData methods */
void   cclcmsg__voice_data__init
                     (CCLCMsgVoiceData         *message);
size_t cclcmsg__voice_data__get_packed_size
                     (const CCLCMsgVoiceData   *message);
size_t cclcmsg__voice_data__pack
                     (const CCLCMsgVoiceData   *message,
                      uint8_t             *out);
size_t cclcmsg__voice_data__pack_to_buffer
                     (const CCLCMsgVoiceData   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgVoiceData *
       cclcmsg__voice_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__voice_data__free_unpacked
                     (CCLCMsgVoiceData *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgBaselineAck methods */
void   cclcmsg__baseline_ack__init
                     (CCLCMsgBaselineAck         *message);
size_t cclcmsg__baseline_ack__get_packed_size
                     (const CCLCMsgBaselineAck   *message);
size_t cclcmsg__baseline_ack__pack
                     (const CCLCMsgBaselineAck   *message,
                      uint8_t             *out);
size_t cclcmsg__baseline_ack__pack_to_buffer
                     (const CCLCMsgBaselineAck   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgBaselineAck *
       cclcmsg__baseline_ack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__baseline_ack__free_unpacked
                     (CCLCMsgBaselineAck *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgListenEvents methods */
void   cclcmsg__listen_events__init
                     (CCLCMsgListenEvents         *message);
size_t cclcmsg__listen_events__get_packed_size
                     (const CCLCMsgListenEvents   *message);
size_t cclcmsg__listen_events__pack
                     (const CCLCMsgListenEvents   *message,
                      uint8_t             *out);
size_t cclcmsg__listen_events__pack_to_buffer
                     (const CCLCMsgListenEvents   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgListenEvents *
       cclcmsg__listen_events__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__listen_events__free_unpacked
                     (CCLCMsgListenEvents *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgRespondCvarValue methods */
void   cclcmsg__respond_cvar_value__init
                     (CCLCMsgRespondCvarValue         *message);
size_t cclcmsg__respond_cvar_value__get_packed_size
                     (const CCLCMsgRespondCvarValue   *message);
size_t cclcmsg__respond_cvar_value__pack
                     (const CCLCMsgRespondCvarValue   *message,
                      uint8_t             *out);
size_t cclcmsg__respond_cvar_value__pack_to_buffer
                     (const CCLCMsgRespondCvarValue   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgRespondCvarValue *
       cclcmsg__respond_cvar_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__respond_cvar_value__free_unpacked
                     (CCLCMsgRespondCvarValue *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgFileCRCCheck methods */
void   cclcmsg__file_crccheck__init
                     (CCLCMsgFileCRCCheck         *message);
size_t cclcmsg__file_crccheck__get_packed_size
                     (const CCLCMsgFileCRCCheck   *message);
size_t cclcmsg__file_crccheck__pack
                     (const CCLCMsgFileCRCCheck   *message,
                      uint8_t             *out);
size_t cclcmsg__file_crccheck__pack_to_buffer
                     (const CCLCMsgFileCRCCheck   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgFileCRCCheck *
       cclcmsg__file_crccheck__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__file_crccheck__free_unpacked
                     (CCLCMsgFileCRCCheck *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgLoadingProgress methods */
void   cclcmsg__loading_progress__init
                     (CCLCMsgLoadingProgress         *message);
size_t cclcmsg__loading_progress__get_packed_size
                     (const CCLCMsgLoadingProgress   *message);
size_t cclcmsg__loading_progress__pack
                     (const CCLCMsgLoadingProgress   *message,
                      uint8_t             *out);
size_t cclcmsg__loading_progress__pack_to_buffer
                     (const CCLCMsgLoadingProgress   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgLoadingProgress *
       cclcmsg__loading_progress__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__loading_progress__free_unpacked
                     (CCLCMsgLoadingProgress *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgSplitPlayerConnect methods */
void   cclcmsg__split_player_connect__init
                     (CCLCMsgSplitPlayerConnect         *message);
size_t cclcmsg__split_player_connect__get_packed_size
                     (const CCLCMsgSplitPlayerConnect   *message);
size_t cclcmsg__split_player_connect__pack
                     (const CCLCMsgSplitPlayerConnect   *message,
                      uint8_t             *out);
size_t cclcmsg__split_player_connect__pack_to_buffer
                     (const CCLCMsgSplitPlayerConnect   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgSplitPlayerConnect *
       cclcmsg__split_player_connect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__split_player_connect__free_unpacked
                     (CCLCMsgSplitPlayerConnect *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgClientMessage methods */
void   cclcmsg__client_message__init
                     (CCLCMsgClientMessage         *message);
size_t cclcmsg__client_message__get_packed_size
                     (const CCLCMsgClientMessage   *message);
size_t cclcmsg__client_message__pack
                     (const CCLCMsgClientMessage   *message,
                      uint8_t             *out);
size_t cclcmsg__client_message__pack_to_buffer
                     (const CCLCMsgClientMessage   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgClientMessage *
       cclcmsg__client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__client_message__free_unpacked
                     (CCLCMsgClientMessage *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgSplitPlayerDisconnect methods */
void   cclcmsg__split_player_disconnect__init
                     (CCLCMsgSplitPlayerDisconnect         *message);
size_t cclcmsg__split_player_disconnect__get_packed_size
                     (const CCLCMsgSplitPlayerDisconnect   *message);
size_t cclcmsg__split_player_disconnect__pack
                     (const CCLCMsgSplitPlayerDisconnect   *message,
                      uint8_t             *out);
size_t cclcmsg__split_player_disconnect__pack_to_buffer
                     (const CCLCMsgSplitPlayerDisconnect   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgSplitPlayerDisconnect *
       cclcmsg__split_player_disconnect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__split_player_disconnect__free_unpacked
                     (CCLCMsgSplitPlayerDisconnect *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgServerStatus methods */
void   cclcmsg__server_status__init
                     (CCLCMsgServerStatus         *message);
size_t cclcmsg__server_status__get_packed_size
                     (const CCLCMsgServerStatus   *message);
size_t cclcmsg__server_status__pack
                     (const CCLCMsgServerStatus   *message,
                      uint8_t             *out);
size_t cclcmsg__server_status__pack_to_buffer
                     (const CCLCMsgServerStatus   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgServerStatus *
       cclcmsg__server_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__server_status__free_unpacked
                     (CCLCMsgServerStatus *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgServerPing methods */
void   cclcmsg__server_ping__init
                     (CCLCMsgServerPing         *message);
size_t cclcmsg__server_ping__get_packed_size
                     (const CCLCMsgServerPing   *message);
size_t cclcmsg__server_ping__pack
                     (const CCLCMsgServerPing   *message,
                      uint8_t             *out);
size_t cclcmsg__server_ping__pack_to_buffer
                     (const CCLCMsgServerPing   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgServerPing *
       cclcmsg__server_ping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__server_ping__free_unpacked
                     (CCLCMsgServerPing *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgRequestPause methods */
void   cclcmsg__request_pause__init
                     (CCLCMsgRequestPause         *message);
size_t cclcmsg__request_pause__get_packed_size
                     (const CCLCMsgRequestPause   *message);
size_t cclcmsg__request_pause__pack
                     (const CCLCMsgRequestPause   *message,
                      uint8_t             *out);
size_t cclcmsg__request_pause__pack_to_buffer
                     (const CCLCMsgRequestPause   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgRequestPause *
       cclcmsg__request_pause__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__request_pause__free_unpacked
                     (CCLCMsgRequestPause *message,
                      ProtobufCAllocator *allocator);
/* CCLCMsgCmdKeyValues methods */
void   cclcmsg__cmd_key_values__init
                     (CCLCMsgCmdKeyValues         *message);
size_t cclcmsg__cmd_key_values__get_packed_size
                     (const CCLCMsgCmdKeyValues   *message);
size_t cclcmsg__cmd_key_values__pack
                     (const CCLCMsgCmdKeyValues   *message,
                      uint8_t             *out);
size_t cclcmsg__cmd_key_values__pack_to_buffer
                     (const CCLCMsgCmdKeyValues   *message,
                      ProtobufCBuffer     *buffer);
CCLCMsgCmdKeyValues *
       cclcmsg__cmd_key_values__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclcmsg__cmd_key_values__free_unpacked
                     (CCLCMsgCmdKeyValues *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgGameEventList__KeyT methods */
void   csvcmsg__game_event_list__key_t__init
                     (CSVCMsgGameEventList__KeyT         *message);
/* CSVCMsgGameEventList__DescriptorT methods */
void   csvcmsg__game_event_list__descriptor_t__init
                     (CSVCMsgGameEventList__DescriptorT         *message);
/* CSVCMsgGameEventList methods */
void   csvcmsg__game_event_list__init
                     (CSVCMsgGameEventList         *message);
size_t csvcmsg__game_event_list__get_packed_size
                     (const CSVCMsgGameEventList   *message);
size_t csvcmsg__game_event_list__pack
                     (const CSVCMsgGameEventList   *message,
                      uint8_t             *out);
size_t csvcmsg__game_event_list__pack_to_buffer
                     (const CSVCMsgGameEventList   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgGameEventList *
       csvcmsg__game_event_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__game_event_list__free_unpacked
                     (CSVCMsgGameEventList *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgPacketEntities methods */
void   csvcmsg__packet_entities__init
                     (CSVCMsgPacketEntities         *message);
size_t csvcmsg__packet_entities__get_packed_size
                     (const CSVCMsgPacketEntities   *message);
size_t csvcmsg__packet_entities__pack
                     (const CSVCMsgPacketEntities   *message,
                      uint8_t             *out);
size_t csvcmsg__packet_entities__pack_to_buffer
                     (const CSVCMsgPacketEntities   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgPacketEntities *
       csvcmsg__packet_entities__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__packet_entities__free_unpacked
                     (CSVCMsgPacketEntities *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgServerInfo methods */
void   csvcmsg__server_info__init
                     (CSVCMsgServerInfo         *message);
size_t csvcmsg__server_info__get_packed_size
                     (const CSVCMsgServerInfo   *message);
size_t csvcmsg__server_info__pack
                     (const CSVCMsgServerInfo   *message,
                      uint8_t             *out);
size_t csvcmsg__server_info__pack_to_buffer
                     (const CSVCMsgServerInfo   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgServerInfo *
       csvcmsg__server_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__server_info__free_unpacked
                     (CSVCMsgServerInfo *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgClassInfo__ClassT methods */
void   csvcmsg__class_info__class_t__init
                     (CSVCMsgClassInfo__ClassT         *message);
/* CSVCMsgClassInfo methods */
void   csvcmsg__class_info__init
                     (CSVCMsgClassInfo         *message);
size_t csvcmsg__class_info__get_packed_size
                     (const CSVCMsgClassInfo   *message);
size_t csvcmsg__class_info__pack
                     (const CSVCMsgClassInfo   *message,
                      uint8_t             *out);
size_t csvcmsg__class_info__pack_to_buffer
                     (const CSVCMsgClassInfo   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgClassInfo *
       csvcmsg__class_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__class_info__free_unpacked
                     (CSVCMsgClassInfo *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgSetView methods */
void   csvcmsg__set_view__init
                     (CSVCMsgSetView         *message);
size_t csvcmsg__set_view__get_packed_size
                     (const CSVCMsgSetView   *message);
size_t csvcmsg__set_view__pack
                     (const CSVCMsgSetView   *message,
                      uint8_t             *out);
size_t csvcmsg__set_view__pack_to_buffer
                     (const CSVCMsgSetView   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgSetView *
       csvcmsg__set_view__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__set_view__free_unpacked
                     (CSVCMsgSetView *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgPrint methods */
void   csvcmsg__print__init
                     (CSVCMsgPrint         *message);
size_t csvcmsg__print__get_packed_size
                     (const CSVCMsgPrint   *message);
size_t csvcmsg__print__pack
                     (const CSVCMsgPrint   *message,
                      uint8_t             *out);
size_t csvcmsg__print__pack_to_buffer
                     (const CSVCMsgPrint   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgPrint *
       csvcmsg__print__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__print__free_unpacked
                     (CSVCMsgPrint *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgVoiceInit methods */
void   csvcmsg__voice_init__init
                     (CSVCMsgVoiceInit         *message);
size_t csvcmsg__voice_init__get_packed_size
                     (const CSVCMsgVoiceInit   *message);
size_t csvcmsg__voice_init__pack
                     (const CSVCMsgVoiceInit   *message,
                      uint8_t             *out);
size_t csvcmsg__voice_init__pack_to_buffer
                     (const CSVCMsgVoiceInit   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgVoiceInit *
       csvcmsg__voice_init__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__voice_init__free_unpacked
                     (CSVCMsgVoiceInit *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgSounds__SounddataT methods */
void   csvcmsg__sounds__sounddata_t__init
                     (CSVCMsgSounds__SounddataT         *message);
/* CSVCMsgSounds methods */
void   csvcmsg__sounds__init
                     (CSVCMsgSounds         *message);
size_t csvcmsg__sounds__get_packed_size
                     (const CSVCMsgSounds   *message);
size_t csvcmsg__sounds__pack
                     (const CSVCMsgSounds   *message,
                      uint8_t             *out);
size_t csvcmsg__sounds__pack_to_buffer
                     (const CSVCMsgSounds   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgSounds *
       csvcmsg__sounds__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__sounds__free_unpacked
                     (CSVCMsgSounds *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgUpdateStringTable methods */
void   csvcmsg__update_string_table__init
                     (CSVCMsgUpdateStringTable         *message);
size_t csvcmsg__update_string_table__get_packed_size
                     (const CSVCMsgUpdateStringTable   *message);
size_t csvcmsg__update_string_table__pack
                     (const CSVCMsgUpdateStringTable   *message,
                      uint8_t             *out);
size_t csvcmsg__update_string_table__pack_to_buffer
                     (const CSVCMsgUpdateStringTable   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgUpdateStringTable *
       csvcmsg__update_string_table__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__update_string_table__free_unpacked
                     (CSVCMsgUpdateStringTable *message,
                      ProtobufCAllocator *allocator);
/* CSVCMsgFullFrameSplit methods */
void   csvcmsg__full_frame_split__init
                     (CSVCMsgFullFrameSplit         *message);
size_t csvcmsg__full_frame_split__get_packed_size
                     (const CSVCMsgFullFrameSplit   *message);
size_t csvcmsg__full_frame_split__pack
                     (const CSVCMsgFullFrameSplit   *message,
                      uint8_t             *out);
size_t csvcmsg__full_frame_split__pack_to_buffer
                     (const CSVCMsgFullFrameSplit   *message,
                      ProtobufCBuffer     *buffer);
CSVCMsgFullFrameSplit *
       csvcmsg__full_frame_split__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csvcmsg__full_frame_split__free_unpacked
                     (CSVCMsgFullFrameSplit *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CCLCMsgClientInfo_Closure)
                 (const CCLCMsgClientInfo *message,
                  void *closure_data);
typedef void (*CCLCMsgMove_Closure)
                 (const CCLCMsgMove *message,
                  void *closure_data);
typedef void (*CMsgVoiceAudio_Closure)
                 (const CMsgVoiceAudio *message,
                  void *closure_data);
typedef void (*CCLCMsgVoiceData_Closure)
                 (const CCLCMsgVoiceData *message,
                  void *closure_data);
typedef void (*CCLCMsgBaselineAck_Closure)
                 (const CCLCMsgBaselineAck *message,
                  void *closure_data);
typedef void (*CCLCMsgListenEvents_Closure)
                 (const CCLCMsgListenEvents *message,
                  void *closure_data);
typedef void (*CCLCMsgRespondCvarValue_Closure)
                 (const CCLCMsgRespondCvarValue *message,
                  void *closure_data);
typedef void (*CCLCMsgFileCRCCheck_Closure)
                 (const CCLCMsgFileCRCCheck *message,
                  void *closure_data);
typedef void (*CCLCMsgLoadingProgress_Closure)
                 (const CCLCMsgLoadingProgress *message,
                  void *closure_data);
typedef void (*CCLCMsgSplitPlayerConnect_Closure)
                 (const CCLCMsgSplitPlayerConnect *message,
                  void *closure_data);
typedef void (*CCLCMsgClientMessage_Closure)
                 (const CCLCMsgClientMessage *message,
                  void *closure_data);
typedef void (*CCLCMsgSplitPlayerDisconnect_Closure)
                 (const CCLCMsgSplitPlayerDisconnect *message,
                  void *closure_data);
typedef void (*CCLCMsgServerStatus_Closure)
                 (const CCLCMsgServerStatus *message,
                  void *closure_data);
typedef void (*CCLCMsgServerPing_Closure)
                 (const CCLCMsgServerPing *message,
                  void *closure_data);
typedef void (*CCLCMsgRequestPause_Closure)
                 (const CCLCMsgRequestPause *message,
                  void *closure_data);
typedef void (*CCLCMsgCmdKeyValues_Closure)
                 (const CCLCMsgCmdKeyValues *message,
                  void *closure_data);
typedef void (*CSVCMsgGameEventList__KeyT_Closure)
                 (const CSVCMsgGameEventList__KeyT *message,
                  void *closure_data);
typedef void (*CSVCMsgGameEventList__DescriptorT_Closure)
                 (const CSVCMsgGameEventList__DescriptorT *message,
                  void *closure_data);
typedef void (*CSVCMsgGameEventList_Closure)
                 (const CSVCMsgGameEventList *message,
                  void *closure_data);
typedef void (*CSVCMsgPacketEntities_Closure)
                 (const CSVCMsgPacketEntities *message,
                  void *closure_data);
typedef void (*CSVCMsgServerInfo_Closure)
                 (const CSVCMsgServerInfo *message,
                  void *closure_data);
typedef void (*CSVCMsgClassInfo__ClassT_Closure)
                 (const CSVCMsgClassInfo__ClassT *message,
                  void *closure_data);
typedef void (*CSVCMsgClassInfo_Closure)
                 (const CSVCMsgClassInfo *message,
                  void *closure_data);
typedef void (*CSVCMsgSetView_Closure)
                 (const CSVCMsgSetView *message,
                  void *closure_data);
typedef void (*CSVCMsgPrint_Closure)
                 (const CSVCMsgPrint *message,
                  void *closure_data);
typedef void (*CSVCMsgVoiceInit_Closure)
                 (const CSVCMsgVoiceInit *message,
                  void *closure_data);
typedef void (*CSVCMsgSounds__SounddataT_Closure)
                 (const CSVCMsgSounds__SounddataT *message,
                  void *closure_data);
typedef void (*CSVCMsgSounds_Closure)
                 (const CSVCMsgSounds *message,
                  void *closure_data);
typedef void (*CSVCMsgUpdateStringTable_Closure)
                 (const CSVCMsgUpdateStringTable *message,
                  void *closure_data);
typedef void (*CSVCMsgFullFrameSplit_Closure)
                 (const CSVCMsgFullFrameSplit *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    voice_data_format_t__descriptor;
extern const ProtobufCEnumDescriptor    request_pause_t__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__client_info__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__move__descriptor;
extern const ProtobufCMessageDescriptor cmsg_voice_audio__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__voice_data__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__baseline_ack__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__listen_events__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__respond_cvar_value__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__file_crccheck__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__loading_progress__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__split_player_connect__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__client_message__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__split_player_disconnect__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__server_status__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__server_ping__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__request_pause__descriptor;
extern const ProtobufCMessageDescriptor cclcmsg__cmd_key_values__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__game_event_list__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__game_event_list__key_t__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__game_event_list__descriptor_t__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__packet_entities__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__server_info__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__class_info__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__class_info__class_t__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__set_view__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__print__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__voice_init__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__sounds__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__sounds__sounddata_t__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__update_string_table__descriptor;
extern const ProtobufCMessageDescriptor csvcmsg__full_frame_split__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_netmessages_2eproto__INCLUDED */
