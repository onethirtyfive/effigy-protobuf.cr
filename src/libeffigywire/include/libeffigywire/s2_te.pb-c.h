/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: s2_te.proto */

#ifndef PROTOBUF_C_s2_5fte_2eproto__INCLUDED
#define PROTOBUF_C_s2_5fte_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "networkbasetypes.pb-c.h"

typedef struct _CMsgTEArmorRicochet CMsgTEArmorRicochet;
typedef struct _CMsgTEBaseBeam CMsgTEBaseBeam;
typedef struct _CMsgTEBeamEntPoint CMsgTEBeamEntPoint;
typedef struct _CMsgTEBeamEnts CMsgTEBeamEnts;
typedef struct _CMsgTEBeamPoints CMsgTEBeamPoints;
typedef struct _CMsgTEBeamRing CMsgTEBeamRing;
typedef struct _CMsgTEBreakModel CMsgTEBreakModel;
typedef struct _CMsgTEBSPDecal CMsgTEBSPDecal;
typedef struct _CMsgTEBubbles CMsgTEBubbles;
typedef struct _CMsgTEBubbleTrail CMsgTEBubbleTrail;
typedef struct _CMsgTEDecal CMsgTEDecal;
typedef struct _CMsgEffectData CMsgEffectData;
typedef struct _CMsgTEEffectDispatch CMsgTEEffectDispatch;
typedef struct _CMsgTEEnergySplash CMsgTEEnergySplash;
typedef struct _CMsgTEFizz CMsgTEFizz;
typedef struct _CMsgTEShatterSurface CMsgTEShatterSurface;
typedef struct _CMsgTEGlowSprite CMsgTEGlowSprite;
typedef struct _CMsgTEImpact CMsgTEImpact;
typedef struct _CMsgTEMuzzleFlash CMsgTEMuzzleFlash;
typedef struct _CMsgTEBloodStream CMsgTEBloodStream;
typedef struct _CMsgTEExplosion CMsgTEExplosion;
typedef struct _CMsgTEDust CMsgTEDust;
typedef struct _CMsgTELargeFunnel CMsgTELargeFunnel;
typedef struct _CMsgTESparks CMsgTESparks;
typedef struct _CMsgTEPhysicsProp CMsgTEPhysicsProp;
typedef struct _CMsgTEPlayerDecal CMsgTEPlayerDecal;
typedef struct _CMsgTEProjectedDecal CMsgTEProjectedDecal;
typedef struct _CMsgTESmoke CMsgTESmoke;
typedef struct _CMsgTEWorldDecal CMsgTEWorldDecal;


/* --- enums --- */

typedef enum _ETEProtobufIds {
  ETEPROTOBUF_IDS__TE_EffectDispatchId = 400,
  ETEPROTOBUF_IDS__TE_ArmorRicochetId = 401,
  ETEPROTOBUF_IDS__TE_BeamEntPointId = 402,
  ETEPROTOBUF_IDS__TE_BeamEntsId = 403,
  ETEPROTOBUF_IDS__TE_BeamPointsId = 404,
  ETEPROTOBUF_IDS__TE_BeamRingId = 405,
  ETEPROTOBUF_IDS__TE_BreakModelId = 406,
  ETEPROTOBUF_IDS__TE_BSPDecalId = 407,
  ETEPROTOBUF_IDS__TE_BubblesId = 408,
  ETEPROTOBUF_IDS__TE_BubbleTrailId = 409,
  ETEPROTOBUF_IDS__TE_DecalId = 410,
  ETEPROTOBUF_IDS__TE_WorldDecalId = 411,
  ETEPROTOBUF_IDS__TE_EnergySplashId = 412,
  ETEPROTOBUF_IDS__TE_FizzId = 413,
  ETEPROTOBUF_IDS__TE_ShatterSurfaceId = 414,
  ETEPROTOBUF_IDS__TE_GlowSpriteId = 415,
  ETEPROTOBUF_IDS__TE_ImpactId = 416,
  ETEPROTOBUF_IDS__TE_MuzzleFlashId = 417,
  ETEPROTOBUF_IDS__TE_BloodStreamId = 418,
  ETEPROTOBUF_IDS__TE_ExplosionId = 419,
  ETEPROTOBUF_IDS__TE_DustId = 420,
  ETEPROTOBUF_IDS__TE_LargeFunnelId = 421,
  ETEPROTOBUF_IDS__TE_SparksId = 422,
  ETEPROTOBUF_IDS__TE_PhysicsPropId = 423,
  ETEPROTOBUF_IDS__TE_PlayerDecalId = 424,
  ETEPROTOBUF_IDS__TE_ProjectedDecalId = 425,
  ETEPROTOBUF_IDS__TE_SmokeId = 426
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ETEPROTOBUF_IDS)
} ETEProtobufIds;

/* --- messages --- */

struct  _CMsgTEArmorRicochet
{
  ProtobufCMessage base;
  CMsgVector *pos;
  CMsgVector *dir;
};
#define CMSG_TEARMOR_RICOCHET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_tearmor_ricochet__descriptor) \
    , NULL, NULL }


struct  _CMsgTEBaseBeam
{
  ProtobufCMessage base;
  protobuf_c_boolean has_modelindex;
  uint64_t modelindex;
  protobuf_c_boolean has_haloindex;
  uint64_t haloindex;
  protobuf_c_boolean has_startframe;
  uint32_t startframe;
  protobuf_c_boolean has_framerate;
  uint32_t framerate;
  protobuf_c_boolean has_life;
  float life;
  protobuf_c_boolean has_width;
  float width;
  protobuf_c_boolean has_endwidth;
  float endwidth;
  protobuf_c_boolean has_fadelength;
  uint32_t fadelength;
  protobuf_c_boolean has_amplitude;
  float amplitude;
  protobuf_c_boolean has_color;
  uint32_t color;
  protobuf_c_boolean has_speed;
  uint32_t speed;
  protobuf_c_boolean has_flags;
  uint32_t flags;
};
#define CMSG_TEBASE_BEAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_tebase_beam__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgTEBeamEntPoint
{
  ProtobufCMessage base;
  CMsgTEBaseBeam *te_base;
  protobuf_c_boolean has_startentity;
  uint32_t startentity;
  protobuf_c_boolean has_endentity;
  uint32_t endentity;
  CMsgVector *start;
  CMsgVector *end;
};
#define CMSG_TEBEAM_ENT_POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_tebeam_ent_point__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL }


struct  _CMsgTEBeamEnts
{
  ProtobufCMessage base;
  CMsgTEBaseBeam *te_base;
  protobuf_c_boolean has_startentity;
  uint32_t startentity;
  protobuf_c_boolean has_endentity;
  uint32_t endentity;
};
#define CMSG_TEBEAM_ENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_tebeam_ents__descriptor) \
    , NULL, 0,0, 0,0 }


struct  _CMsgTEBeamPoints
{
  ProtobufCMessage base;
  CMsgTEBaseBeam *te_base;
  CMsgVector *start;
  CMsgVector *end;
};
#define CMSG_TEBEAM_POINTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_tebeam_points__descriptor) \
    , NULL, NULL, NULL }


struct  _CMsgTEBeamRing
{
  ProtobufCMessage base;
  CMsgTEBaseBeam *te_base;
  protobuf_c_boolean has_startentity;
  uint32_t startentity;
  protobuf_c_boolean has_endentity;
  uint32_t endentity;
};
#define CMSG_TEBEAM_RING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_tebeam_ring__descriptor) \
    , NULL, 0,0, 0,0 }


struct  _CMsgTEBreakModel
{
  ProtobufCMessage base;
  CMsgVector *origin;
  CMsgQAngle *angles;
  CMsgVector *size;
  CMsgVector *velocity;
  protobuf_c_boolean has_randomization;
  uint32_t randomization;
  protobuf_c_boolean has_modelindex;
  uint64_t modelindex;
  protobuf_c_boolean has_count;
  uint32_t count;
  protobuf_c_boolean has_time;
  float time;
  protobuf_c_boolean has_flags;
  uint32_t flags;
};
#define CMSG_TEBREAK_MODEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_tebreak_model__descriptor) \
    , NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgTEBSPDecal
{
  ProtobufCMessage base;
  CMsgVector *origin;
  CMsgVector *normal;
  CMsgVector *saxis;
  protobuf_c_boolean has_entity;
  uint32_t entity;
  protobuf_c_boolean has_index;
  uint32_t index;
};
#define CMSG_TEBSPDECAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_tebspdecal__descriptor) \
    , NULL, NULL, NULL, 0,0, 0,0 }


struct  _CMsgTEBubbles
{
  ProtobufCMessage base;
  CMsgVector *mins;
  CMsgVector *maxs;
  protobuf_c_boolean has_height;
  float height;
  protobuf_c_boolean has_count;
  uint32_t count;
  protobuf_c_boolean has_speed;
  float speed;
};
#define CMSG_TEBUBBLES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_tebubbles__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0 }


struct  _CMsgTEBubbleTrail
{
  ProtobufCMessage base;
  CMsgVector *mins;
  CMsgVector *maxs;
  protobuf_c_boolean has_waterz;
  float waterz;
  protobuf_c_boolean has_count;
  uint32_t count;
  protobuf_c_boolean has_speed;
  float speed;
};
#define CMSG_TEBUBBLE_TRAIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_tebubble_trail__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0 }


struct  _CMsgTEDecal
{
  ProtobufCMessage base;
  CMsgVector *origin;
  CMsgVector *start;
  protobuf_c_boolean has_entity;
  uint32_t entity;
  protobuf_c_boolean has_hitbox;
  uint32_t hitbox;
  protobuf_c_boolean has_index;
  uint32_t index;
};
#define CMSG_TEDECAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_tedecal__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0 }


struct  _CMsgEffectData
{
  ProtobufCMessage base;
  CMsgVector *origin;
  CMsgVector *start;
  CMsgVector *normal;
  CMsgQAngle *angles;
  protobuf_c_boolean has_entity;
  uint32_t entity;
  protobuf_c_boolean has_otherentity;
  uint32_t otherentity;
  protobuf_c_boolean has_scale;
  float scale;
  protobuf_c_boolean has_magnitude;
  float magnitude;
  protobuf_c_boolean has_radius;
  float radius;
  protobuf_c_boolean has_surfaceprop;
  uint32_t surfaceprop;
  protobuf_c_boolean has_effectindex;
  uint64_t effectindex;
  protobuf_c_boolean has_damagetype;
  uint32_t damagetype;
  protobuf_c_boolean has_material;
  uint32_t material;
  protobuf_c_boolean has_hitbox;
  uint32_t hitbox;
  protobuf_c_boolean has_color;
  uint32_t color;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  protobuf_c_boolean has_attachmentindex;
  int32_t attachmentindex;
  protobuf_c_boolean has_effectname;
  uint32_t effectname;
  protobuf_c_boolean has_attachmentname;
  uint32_t attachmentname;
};
#define CMSG_EFFECT_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_effect_data__descriptor) \
    , NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgTEEffectDispatch
{
  ProtobufCMessage base;
  CMsgEffectData *effectdata;
};
#define CMSG_TEEFFECT_DISPATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_teeffect_dispatch__descriptor) \
    , NULL }


struct  _CMsgTEEnergySplash
{
  ProtobufCMessage base;
  CMsgVector *pos;
  CMsgVector *dir;
  protobuf_c_boolean has_explosive;
  protobuf_c_boolean explosive;
};
#define CMSG_TEENERGY_SPLASH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_teenergy_splash__descriptor) \
    , NULL, NULL, 0,0 }


struct  _CMsgTEFizz
{
  ProtobufCMessage base;
  protobuf_c_boolean has_entity;
  uint32_t entity;
  protobuf_c_boolean has_density;
  uint32_t density;
  protobuf_c_boolean has_current;
  int32_t current;
};
#define CMSG_TEFIZZ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_tefizz__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _CMsgTEShatterSurface
{
  ProtobufCMessage base;
  CMsgVector *origin;
  CMsgQAngle *angles;
  CMsgVector *force;
  CMsgVector *forcepos;
  protobuf_c_boolean has_width;
  float width;
  protobuf_c_boolean has_height;
  float height;
  protobuf_c_boolean has_shardsize;
  float shardsize;
  protobuf_c_boolean has_surfacetype;
  uint32_t surfacetype;
  protobuf_c_boolean has_frontcolor;
  uint32_t frontcolor;
  protobuf_c_boolean has_backcolor;
  uint32_t backcolor;
};
#define CMSG_TESHATTER_SURFACE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_teshatter_surface__descriptor) \
    , NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgTEGlowSprite
{
  ProtobufCMessage base;
  CMsgVector *origin;
  protobuf_c_boolean has_scale;
  float scale;
  protobuf_c_boolean has_life;
  float life;
  protobuf_c_boolean has_brightness;
  uint32_t brightness;
};
#define CMSG_TEGLOW_SPRITE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_teglow_sprite__descriptor) \
    , NULL, 0,0, 0,0, 0,0 }


struct  _CMsgTEImpact
{
  ProtobufCMessage base;
  CMsgVector *origin;
  CMsgVector *normal;
  protobuf_c_boolean has_type;
  uint32_t type;
};
#define CMSG_TEIMPACT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_teimpact__descriptor) \
    , NULL, NULL, 0,0 }


struct  _CMsgTEMuzzleFlash
{
  ProtobufCMessage base;
  CMsgVector *origin;
  CMsgQAngle *angles;
  protobuf_c_boolean has_scale;
  float scale;
  protobuf_c_boolean has_type;
  uint32_t type;
};
#define CMSG_TEMUZZLE_FLASH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_temuzzle_flash__descriptor) \
    , NULL, NULL, 0,0, 0,0 }


struct  _CMsgTEBloodStream
{
  ProtobufCMessage base;
  CMsgVector *origin;
  CMsgVector *direction;
  protobuf_c_boolean has_color;
  uint32_t color;
  protobuf_c_boolean has_amount;
  uint32_t amount;
};
#define CMSG_TEBLOOD_STREAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_teblood_stream__descriptor) \
    , NULL, NULL, 0,0, 0,0 }


struct  _CMsgTEExplosion
{
  ProtobufCMessage base;
  CMsgVector *origin;
  protobuf_c_boolean has_framerate;
  uint32_t framerate;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  CMsgVector *normal;
  protobuf_c_boolean has_materialtype;
  uint32_t materialtype;
  protobuf_c_boolean has_radius;
  uint32_t radius;
  protobuf_c_boolean has_magnitude;
  uint32_t magnitude;
  protobuf_c_boolean has_scale;
  float scale;
  protobuf_c_boolean has_affect_ragdolls;
  protobuf_c_boolean affect_ragdolls;
};
#define CMSG_TEEXPLOSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_teexplosion__descriptor) \
    , NULL, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgTEDust
{
  ProtobufCMessage base;
  CMsgVector *origin;
  protobuf_c_boolean has_size;
  float size;
  protobuf_c_boolean has_speed;
  float speed;
  CMsgVector *direction;
};
#define CMSG_TEDUST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_tedust__descriptor) \
    , NULL, 0,0, 0,0, NULL }


struct  _CMsgTELargeFunnel
{
  ProtobufCMessage base;
  CMsgVector *origin;
  protobuf_c_boolean has_reversed;
  uint32_t reversed;
};
#define CMSG_TELARGE_FUNNEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_telarge_funnel__descriptor) \
    , NULL, 0,0 }


struct  _CMsgTESparks
{
  ProtobufCMessage base;
  CMsgVector *origin;
  protobuf_c_boolean has_magnitude;
  uint32_t magnitude;
  protobuf_c_boolean has_length;
  uint32_t length;
  CMsgVector *direction;
};
#define CMSG_TESPARKS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_tesparks__descriptor) \
    , NULL, 0,0, 0,0, NULL }


struct  _CMsgTEPhysicsProp
{
  ProtobufCMessage base;
  CMsgVector *origin;
  CMsgVector *velocity;
  CMsgQAngle *angles;
  protobuf_c_boolean has_skin;
  uint32_t skin;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  protobuf_c_boolean has_effects;
  uint32_t effects;
  protobuf_c_boolean has_color;
  uint32_t color;
  protobuf_c_boolean has_modelindex;
  uint64_t modelindex;
  protobuf_c_boolean has_breakmodelsnottomake;
  uint32_t breakmodelsnottomake;
  protobuf_c_boolean has_scale;
  float scale;
};
#define CMSG_TEPHYSICS_PROP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_tephysics_prop__descriptor) \
    , NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CMsgTEPlayerDecal
{
  ProtobufCMessage base;
  CMsgVector *origin;
  protobuf_c_boolean has_player;
  uint32_t player;
  protobuf_c_boolean has_entity;
  uint32_t entity;
};
#define CMSG_TEPLAYER_DECAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_teplayer_decal__descriptor) \
    , NULL, 0,0, 0,0 }


struct  _CMsgTEProjectedDecal
{
  ProtobufCMessage base;
  CMsgVector *origin;
  CMsgQAngle *angles;
  protobuf_c_boolean has_index;
  uint32_t index;
  protobuf_c_boolean has_distance;
  float distance;
};
#define CMSG_TEPROJECTED_DECAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_teprojected_decal__descriptor) \
    , NULL, NULL, 0,0, 0,0 }


struct  _CMsgTESmoke
{
  ProtobufCMessage base;
  CMsgVector *origin;
  protobuf_c_boolean has_scale;
  float scale;
};
#define CMSG_TESMOKE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_tesmoke__descriptor) \
    , NULL, 0,0 }


struct  _CMsgTEWorldDecal
{
  ProtobufCMessage base;
  CMsgVector *origin;
  CMsgVector *normal;
  protobuf_c_boolean has_index;
  uint32_t index;
};
#define CMSG_TEWORLD_DECAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmsg_teworld_decal__descriptor) \
    , NULL, NULL, 0,0 }


/* CMsgTEArmorRicochet methods */
void   cmsg_tearmor_ricochet__init
                     (CMsgTEArmorRicochet         *message);
size_t cmsg_tearmor_ricochet__get_packed_size
                     (const CMsgTEArmorRicochet   *message);
size_t cmsg_tearmor_ricochet__pack
                     (const CMsgTEArmorRicochet   *message,
                      uint8_t             *out);
size_t cmsg_tearmor_ricochet__pack_to_buffer
                     (const CMsgTEArmorRicochet   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEArmorRicochet *
       cmsg_tearmor_ricochet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_tearmor_ricochet__free_unpacked
                     (CMsgTEArmorRicochet *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEBaseBeam methods */
void   cmsg_tebase_beam__init
                     (CMsgTEBaseBeam         *message);
size_t cmsg_tebase_beam__get_packed_size
                     (const CMsgTEBaseBeam   *message);
size_t cmsg_tebase_beam__pack
                     (const CMsgTEBaseBeam   *message,
                      uint8_t             *out);
size_t cmsg_tebase_beam__pack_to_buffer
                     (const CMsgTEBaseBeam   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEBaseBeam *
       cmsg_tebase_beam__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_tebase_beam__free_unpacked
                     (CMsgTEBaseBeam *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEBeamEntPoint methods */
void   cmsg_tebeam_ent_point__init
                     (CMsgTEBeamEntPoint         *message);
size_t cmsg_tebeam_ent_point__get_packed_size
                     (const CMsgTEBeamEntPoint   *message);
size_t cmsg_tebeam_ent_point__pack
                     (const CMsgTEBeamEntPoint   *message,
                      uint8_t             *out);
size_t cmsg_tebeam_ent_point__pack_to_buffer
                     (const CMsgTEBeamEntPoint   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEBeamEntPoint *
       cmsg_tebeam_ent_point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_tebeam_ent_point__free_unpacked
                     (CMsgTEBeamEntPoint *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEBeamEnts methods */
void   cmsg_tebeam_ents__init
                     (CMsgTEBeamEnts         *message);
size_t cmsg_tebeam_ents__get_packed_size
                     (const CMsgTEBeamEnts   *message);
size_t cmsg_tebeam_ents__pack
                     (const CMsgTEBeamEnts   *message,
                      uint8_t             *out);
size_t cmsg_tebeam_ents__pack_to_buffer
                     (const CMsgTEBeamEnts   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEBeamEnts *
       cmsg_tebeam_ents__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_tebeam_ents__free_unpacked
                     (CMsgTEBeamEnts *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEBeamPoints methods */
void   cmsg_tebeam_points__init
                     (CMsgTEBeamPoints         *message);
size_t cmsg_tebeam_points__get_packed_size
                     (const CMsgTEBeamPoints   *message);
size_t cmsg_tebeam_points__pack
                     (const CMsgTEBeamPoints   *message,
                      uint8_t             *out);
size_t cmsg_tebeam_points__pack_to_buffer
                     (const CMsgTEBeamPoints   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEBeamPoints *
       cmsg_tebeam_points__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_tebeam_points__free_unpacked
                     (CMsgTEBeamPoints *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEBeamRing methods */
void   cmsg_tebeam_ring__init
                     (CMsgTEBeamRing         *message);
size_t cmsg_tebeam_ring__get_packed_size
                     (const CMsgTEBeamRing   *message);
size_t cmsg_tebeam_ring__pack
                     (const CMsgTEBeamRing   *message,
                      uint8_t             *out);
size_t cmsg_tebeam_ring__pack_to_buffer
                     (const CMsgTEBeamRing   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEBeamRing *
       cmsg_tebeam_ring__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_tebeam_ring__free_unpacked
                     (CMsgTEBeamRing *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEBreakModel methods */
void   cmsg_tebreak_model__init
                     (CMsgTEBreakModel         *message);
size_t cmsg_tebreak_model__get_packed_size
                     (const CMsgTEBreakModel   *message);
size_t cmsg_tebreak_model__pack
                     (const CMsgTEBreakModel   *message,
                      uint8_t             *out);
size_t cmsg_tebreak_model__pack_to_buffer
                     (const CMsgTEBreakModel   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEBreakModel *
       cmsg_tebreak_model__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_tebreak_model__free_unpacked
                     (CMsgTEBreakModel *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEBSPDecal methods */
void   cmsg_tebspdecal__init
                     (CMsgTEBSPDecal         *message);
size_t cmsg_tebspdecal__get_packed_size
                     (const CMsgTEBSPDecal   *message);
size_t cmsg_tebspdecal__pack
                     (const CMsgTEBSPDecal   *message,
                      uint8_t             *out);
size_t cmsg_tebspdecal__pack_to_buffer
                     (const CMsgTEBSPDecal   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEBSPDecal *
       cmsg_tebspdecal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_tebspdecal__free_unpacked
                     (CMsgTEBSPDecal *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEBubbles methods */
void   cmsg_tebubbles__init
                     (CMsgTEBubbles         *message);
size_t cmsg_tebubbles__get_packed_size
                     (const CMsgTEBubbles   *message);
size_t cmsg_tebubbles__pack
                     (const CMsgTEBubbles   *message,
                      uint8_t             *out);
size_t cmsg_tebubbles__pack_to_buffer
                     (const CMsgTEBubbles   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEBubbles *
       cmsg_tebubbles__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_tebubbles__free_unpacked
                     (CMsgTEBubbles *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEBubbleTrail methods */
void   cmsg_tebubble_trail__init
                     (CMsgTEBubbleTrail         *message);
size_t cmsg_tebubble_trail__get_packed_size
                     (const CMsgTEBubbleTrail   *message);
size_t cmsg_tebubble_trail__pack
                     (const CMsgTEBubbleTrail   *message,
                      uint8_t             *out);
size_t cmsg_tebubble_trail__pack_to_buffer
                     (const CMsgTEBubbleTrail   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEBubbleTrail *
       cmsg_tebubble_trail__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_tebubble_trail__free_unpacked
                     (CMsgTEBubbleTrail *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEDecal methods */
void   cmsg_tedecal__init
                     (CMsgTEDecal         *message);
size_t cmsg_tedecal__get_packed_size
                     (const CMsgTEDecal   *message);
size_t cmsg_tedecal__pack
                     (const CMsgTEDecal   *message,
                      uint8_t             *out);
size_t cmsg_tedecal__pack_to_buffer
                     (const CMsgTEDecal   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEDecal *
       cmsg_tedecal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_tedecal__free_unpacked
                     (CMsgTEDecal *message,
                      ProtobufCAllocator *allocator);
/* CMsgEffectData methods */
void   cmsg_effect_data__init
                     (CMsgEffectData         *message);
size_t cmsg_effect_data__get_packed_size
                     (const CMsgEffectData   *message);
size_t cmsg_effect_data__pack
                     (const CMsgEffectData   *message,
                      uint8_t             *out);
size_t cmsg_effect_data__pack_to_buffer
                     (const CMsgEffectData   *message,
                      ProtobufCBuffer     *buffer);
CMsgEffectData *
       cmsg_effect_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_effect_data__free_unpacked
                     (CMsgEffectData *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEEffectDispatch methods */
void   cmsg_teeffect_dispatch__init
                     (CMsgTEEffectDispatch         *message);
size_t cmsg_teeffect_dispatch__get_packed_size
                     (const CMsgTEEffectDispatch   *message);
size_t cmsg_teeffect_dispatch__pack
                     (const CMsgTEEffectDispatch   *message,
                      uint8_t             *out);
size_t cmsg_teeffect_dispatch__pack_to_buffer
                     (const CMsgTEEffectDispatch   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEEffectDispatch *
       cmsg_teeffect_dispatch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_teeffect_dispatch__free_unpacked
                     (CMsgTEEffectDispatch *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEEnergySplash methods */
void   cmsg_teenergy_splash__init
                     (CMsgTEEnergySplash         *message);
size_t cmsg_teenergy_splash__get_packed_size
                     (const CMsgTEEnergySplash   *message);
size_t cmsg_teenergy_splash__pack
                     (const CMsgTEEnergySplash   *message,
                      uint8_t             *out);
size_t cmsg_teenergy_splash__pack_to_buffer
                     (const CMsgTEEnergySplash   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEEnergySplash *
       cmsg_teenergy_splash__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_teenergy_splash__free_unpacked
                     (CMsgTEEnergySplash *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEFizz methods */
void   cmsg_tefizz__init
                     (CMsgTEFizz         *message);
size_t cmsg_tefizz__get_packed_size
                     (const CMsgTEFizz   *message);
size_t cmsg_tefizz__pack
                     (const CMsgTEFizz   *message,
                      uint8_t             *out);
size_t cmsg_tefizz__pack_to_buffer
                     (const CMsgTEFizz   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEFizz *
       cmsg_tefizz__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_tefizz__free_unpacked
                     (CMsgTEFizz *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEShatterSurface methods */
void   cmsg_teshatter_surface__init
                     (CMsgTEShatterSurface         *message);
size_t cmsg_teshatter_surface__get_packed_size
                     (const CMsgTEShatterSurface   *message);
size_t cmsg_teshatter_surface__pack
                     (const CMsgTEShatterSurface   *message,
                      uint8_t             *out);
size_t cmsg_teshatter_surface__pack_to_buffer
                     (const CMsgTEShatterSurface   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEShatterSurface *
       cmsg_teshatter_surface__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_teshatter_surface__free_unpacked
                     (CMsgTEShatterSurface *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEGlowSprite methods */
void   cmsg_teglow_sprite__init
                     (CMsgTEGlowSprite         *message);
size_t cmsg_teglow_sprite__get_packed_size
                     (const CMsgTEGlowSprite   *message);
size_t cmsg_teglow_sprite__pack
                     (const CMsgTEGlowSprite   *message,
                      uint8_t             *out);
size_t cmsg_teglow_sprite__pack_to_buffer
                     (const CMsgTEGlowSprite   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEGlowSprite *
       cmsg_teglow_sprite__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_teglow_sprite__free_unpacked
                     (CMsgTEGlowSprite *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEImpact methods */
void   cmsg_teimpact__init
                     (CMsgTEImpact         *message);
size_t cmsg_teimpact__get_packed_size
                     (const CMsgTEImpact   *message);
size_t cmsg_teimpact__pack
                     (const CMsgTEImpact   *message,
                      uint8_t             *out);
size_t cmsg_teimpact__pack_to_buffer
                     (const CMsgTEImpact   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEImpact *
       cmsg_teimpact__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_teimpact__free_unpacked
                     (CMsgTEImpact *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEMuzzleFlash methods */
void   cmsg_temuzzle_flash__init
                     (CMsgTEMuzzleFlash         *message);
size_t cmsg_temuzzle_flash__get_packed_size
                     (const CMsgTEMuzzleFlash   *message);
size_t cmsg_temuzzle_flash__pack
                     (const CMsgTEMuzzleFlash   *message,
                      uint8_t             *out);
size_t cmsg_temuzzle_flash__pack_to_buffer
                     (const CMsgTEMuzzleFlash   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEMuzzleFlash *
       cmsg_temuzzle_flash__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_temuzzle_flash__free_unpacked
                     (CMsgTEMuzzleFlash *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEBloodStream methods */
void   cmsg_teblood_stream__init
                     (CMsgTEBloodStream         *message);
size_t cmsg_teblood_stream__get_packed_size
                     (const CMsgTEBloodStream   *message);
size_t cmsg_teblood_stream__pack
                     (const CMsgTEBloodStream   *message,
                      uint8_t             *out);
size_t cmsg_teblood_stream__pack_to_buffer
                     (const CMsgTEBloodStream   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEBloodStream *
       cmsg_teblood_stream__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_teblood_stream__free_unpacked
                     (CMsgTEBloodStream *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEExplosion methods */
void   cmsg_teexplosion__init
                     (CMsgTEExplosion         *message);
size_t cmsg_teexplosion__get_packed_size
                     (const CMsgTEExplosion   *message);
size_t cmsg_teexplosion__pack
                     (const CMsgTEExplosion   *message,
                      uint8_t             *out);
size_t cmsg_teexplosion__pack_to_buffer
                     (const CMsgTEExplosion   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEExplosion *
       cmsg_teexplosion__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_teexplosion__free_unpacked
                     (CMsgTEExplosion *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEDust methods */
void   cmsg_tedust__init
                     (CMsgTEDust         *message);
size_t cmsg_tedust__get_packed_size
                     (const CMsgTEDust   *message);
size_t cmsg_tedust__pack
                     (const CMsgTEDust   *message,
                      uint8_t             *out);
size_t cmsg_tedust__pack_to_buffer
                     (const CMsgTEDust   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEDust *
       cmsg_tedust__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_tedust__free_unpacked
                     (CMsgTEDust *message,
                      ProtobufCAllocator *allocator);
/* CMsgTELargeFunnel methods */
void   cmsg_telarge_funnel__init
                     (CMsgTELargeFunnel         *message);
size_t cmsg_telarge_funnel__get_packed_size
                     (const CMsgTELargeFunnel   *message);
size_t cmsg_telarge_funnel__pack
                     (const CMsgTELargeFunnel   *message,
                      uint8_t             *out);
size_t cmsg_telarge_funnel__pack_to_buffer
                     (const CMsgTELargeFunnel   *message,
                      ProtobufCBuffer     *buffer);
CMsgTELargeFunnel *
       cmsg_telarge_funnel__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_telarge_funnel__free_unpacked
                     (CMsgTELargeFunnel *message,
                      ProtobufCAllocator *allocator);
/* CMsgTESparks methods */
void   cmsg_tesparks__init
                     (CMsgTESparks         *message);
size_t cmsg_tesparks__get_packed_size
                     (const CMsgTESparks   *message);
size_t cmsg_tesparks__pack
                     (const CMsgTESparks   *message,
                      uint8_t             *out);
size_t cmsg_tesparks__pack_to_buffer
                     (const CMsgTESparks   *message,
                      ProtobufCBuffer     *buffer);
CMsgTESparks *
       cmsg_tesparks__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_tesparks__free_unpacked
                     (CMsgTESparks *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEPhysicsProp methods */
void   cmsg_tephysics_prop__init
                     (CMsgTEPhysicsProp         *message);
size_t cmsg_tephysics_prop__get_packed_size
                     (const CMsgTEPhysicsProp   *message);
size_t cmsg_tephysics_prop__pack
                     (const CMsgTEPhysicsProp   *message,
                      uint8_t             *out);
size_t cmsg_tephysics_prop__pack_to_buffer
                     (const CMsgTEPhysicsProp   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEPhysicsProp *
       cmsg_tephysics_prop__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_tephysics_prop__free_unpacked
                     (CMsgTEPhysicsProp *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEPlayerDecal methods */
void   cmsg_teplayer_decal__init
                     (CMsgTEPlayerDecal         *message);
size_t cmsg_teplayer_decal__get_packed_size
                     (const CMsgTEPlayerDecal   *message);
size_t cmsg_teplayer_decal__pack
                     (const CMsgTEPlayerDecal   *message,
                      uint8_t             *out);
size_t cmsg_teplayer_decal__pack_to_buffer
                     (const CMsgTEPlayerDecal   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEPlayerDecal *
       cmsg_teplayer_decal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_teplayer_decal__free_unpacked
                     (CMsgTEPlayerDecal *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEProjectedDecal methods */
void   cmsg_teprojected_decal__init
                     (CMsgTEProjectedDecal         *message);
size_t cmsg_teprojected_decal__get_packed_size
                     (const CMsgTEProjectedDecal   *message);
size_t cmsg_teprojected_decal__pack
                     (const CMsgTEProjectedDecal   *message,
                      uint8_t             *out);
size_t cmsg_teprojected_decal__pack_to_buffer
                     (const CMsgTEProjectedDecal   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEProjectedDecal *
       cmsg_teprojected_decal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_teprojected_decal__free_unpacked
                     (CMsgTEProjectedDecal *message,
                      ProtobufCAllocator *allocator);
/* CMsgTESmoke methods */
void   cmsg_tesmoke__init
                     (CMsgTESmoke         *message);
size_t cmsg_tesmoke__get_packed_size
                     (const CMsgTESmoke   *message);
size_t cmsg_tesmoke__pack
                     (const CMsgTESmoke   *message,
                      uint8_t             *out);
size_t cmsg_tesmoke__pack_to_buffer
                     (const CMsgTESmoke   *message,
                      ProtobufCBuffer     *buffer);
CMsgTESmoke *
       cmsg_tesmoke__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_tesmoke__free_unpacked
                     (CMsgTESmoke *message,
                      ProtobufCAllocator *allocator);
/* CMsgTEWorldDecal methods */
void   cmsg_teworld_decal__init
                     (CMsgTEWorldDecal         *message);
size_t cmsg_teworld_decal__get_packed_size
                     (const CMsgTEWorldDecal   *message);
size_t cmsg_teworld_decal__pack
                     (const CMsgTEWorldDecal   *message,
                      uint8_t             *out);
size_t cmsg_teworld_decal__pack_to_buffer
                     (const CMsgTEWorldDecal   *message,
                      ProtobufCBuffer     *buffer);
CMsgTEWorldDecal *
       cmsg_teworld_decal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_teworld_decal__free_unpacked
                     (CMsgTEWorldDecal *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CMsgTEArmorRicochet_Closure)
                 (const CMsgTEArmorRicochet *message,
                  void *closure_data);
typedef void (*CMsgTEBaseBeam_Closure)
                 (const CMsgTEBaseBeam *message,
                  void *closure_data);
typedef void (*CMsgTEBeamEntPoint_Closure)
                 (const CMsgTEBeamEntPoint *message,
                  void *closure_data);
typedef void (*CMsgTEBeamEnts_Closure)
                 (const CMsgTEBeamEnts *message,
                  void *closure_data);
typedef void (*CMsgTEBeamPoints_Closure)
                 (const CMsgTEBeamPoints *message,
                  void *closure_data);
typedef void (*CMsgTEBeamRing_Closure)
                 (const CMsgTEBeamRing *message,
                  void *closure_data);
typedef void (*CMsgTEBreakModel_Closure)
                 (const CMsgTEBreakModel *message,
                  void *closure_data);
typedef void (*CMsgTEBSPDecal_Closure)
                 (const CMsgTEBSPDecal *message,
                  void *closure_data);
typedef void (*CMsgTEBubbles_Closure)
                 (const CMsgTEBubbles *message,
                  void *closure_data);
typedef void (*CMsgTEBubbleTrail_Closure)
                 (const CMsgTEBubbleTrail *message,
                  void *closure_data);
typedef void (*CMsgTEDecal_Closure)
                 (const CMsgTEDecal *message,
                  void *closure_data);
typedef void (*CMsgEffectData_Closure)
                 (const CMsgEffectData *message,
                  void *closure_data);
typedef void (*CMsgTEEffectDispatch_Closure)
                 (const CMsgTEEffectDispatch *message,
                  void *closure_data);
typedef void (*CMsgTEEnergySplash_Closure)
                 (const CMsgTEEnergySplash *message,
                  void *closure_data);
typedef void (*CMsgTEFizz_Closure)
                 (const CMsgTEFizz *message,
                  void *closure_data);
typedef void (*CMsgTEShatterSurface_Closure)
                 (const CMsgTEShatterSurface *message,
                  void *closure_data);
typedef void (*CMsgTEGlowSprite_Closure)
                 (const CMsgTEGlowSprite *message,
                  void *closure_data);
typedef void (*CMsgTEImpact_Closure)
                 (const CMsgTEImpact *message,
                  void *closure_data);
typedef void (*CMsgTEMuzzleFlash_Closure)
                 (const CMsgTEMuzzleFlash *message,
                  void *closure_data);
typedef void (*CMsgTEBloodStream_Closure)
                 (const CMsgTEBloodStream *message,
                  void *closure_data);
typedef void (*CMsgTEExplosion_Closure)
                 (const CMsgTEExplosion *message,
                  void *closure_data);
typedef void (*CMsgTEDust_Closure)
                 (const CMsgTEDust *message,
                  void *closure_data);
typedef void (*CMsgTELargeFunnel_Closure)
                 (const CMsgTELargeFunnel *message,
                  void *closure_data);
typedef void (*CMsgTESparks_Closure)
                 (const CMsgTESparks *message,
                  void *closure_data);
typedef void (*CMsgTEPhysicsProp_Closure)
                 (const CMsgTEPhysicsProp *message,
                  void *closure_data);
typedef void (*CMsgTEPlayerDecal_Closure)
                 (const CMsgTEPlayerDecal *message,
                  void *closure_data);
typedef void (*CMsgTEProjectedDecal_Closure)
                 (const CMsgTEProjectedDecal *message,
                  void *closure_data);
typedef void (*CMsgTESmoke_Closure)
                 (const CMsgTESmoke *message,
                  void *closure_data);
typedef void (*CMsgTEWorldDecal_Closure)
                 (const CMsgTEWorldDecal *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    eteprotobuf_ids__descriptor;
extern const ProtobufCMessageDescriptor cmsg_tearmor_ricochet__descriptor;
extern const ProtobufCMessageDescriptor cmsg_tebase_beam__descriptor;
extern const ProtobufCMessageDescriptor cmsg_tebeam_ent_point__descriptor;
extern const ProtobufCMessageDescriptor cmsg_tebeam_ents__descriptor;
extern const ProtobufCMessageDescriptor cmsg_tebeam_points__descriptor;
extern const ProtobufCMessageDescriptor cmsg_tebeam_ring__descriptor;
extern const ProtobufCMessageDescriptor cmsg_tebreak_model__descriptor;
extern const ProtobufCMessageDescriptor cmsg_tebspdecal__descriptor;
extern const ProtobufCMessageDescriptor cmsg_tebubbles__descriptor;
extern const ProtobufCMessageDescriptor cmsg_tebubble_trail__descriptor;
extern const ProtobufCMessageDescriptor cmsg_tedecal__descriptor;
extern const ProtobufCMessageDescriptor cmsg_effect_data__descriptor;
extern const ProtobufCMessageDescriptor cmsg_teeffect_dispatch__descriptor;
extern const ProtobufCMessageDescriptor cmsg_teenergy_splash__descriptor;
extern const ProtobufCMessageDescriptor cmsg_tefizz__descriptor;
extern const ProtobufCMessageDescriptor cmsg_teshatter_surface__descriptor;
extern const ProtobufCMessageDescriptor cmsg_teglow_sprite__descriptor;
extern const ProtobufCMessageDescriptor cmsg_teimpact__descriptor;
extern const ProtobufCMessageDescriptor cmsg_temuzzle_flash__descriptor;
extern const ProtobufCMessageDescriptor cmsg_teblood_stream__descriptor;
extern const ProtobufCMessageDescriptor cmsg_teexplosion__descriptor;
extern const ProtobufCMessageDescriptor cmsg_tedust__descriptor;
extern const ProtobufCMessageDescriptor cmsg_telarge_funnel__descriptor;
extern const ProtobufCMessageDescriptor cmsg_tesparks__descriptor;
extern const ProtobufCMessageDescriptor cmsg_tephysics_prop__descriptor;
extern const ProtobufCMessageDescriptor cmsg_teplayer_decal__descriptor;
extern const ProtobufCMessageDescriptor cmsg_teprojected_decal__descriptor;
extern const ProtobufCMessageDescriptor cmsg_tesmoke__descriptor;
extern const ProtobufCMessageDescriptor cmsg_teworld_decal__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_s2_5fte_2eproto__INCLUDED */
